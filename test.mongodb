// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('travel');

// db.wishSpot.createIndex({KEY:1});
// db.routes.createIndex({region:1, title:1}, {unique:true})
// db.routes.renameCollection('courses')
// db.courses.deleteMany({'email':'test@gmail.com'});


// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.
// db.sales.drop();

// Insert a few documents into the sales collection.
db.courses.insert([
  {'email':'test@gmail.com', 
  'title':'부산1', 
  'region':'부산', 
  '1':{
  "_id": {
    "$oid": "60fa28618fefd622efdd8349"
  },
  "email": "test@gmail.com",
  "region": "부산",
  "name": "해운대"
},
'2':{
  "_id": {
    "$oid": "60fa28618fefd622efdd834a"
  },
  "email": "test@gmail.com",
  "region": "부산",
  "name": "송도"
}
}
]);

// Run a find command to view items sold on April 4th, 2014.
// db.sales.find({ date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } });

// Build an aggregation to view total sales for each product in 2014.
// const aggregation = [
//   { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
//   { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
// ];

// Run the aggregation and open a cursor to the results.
// Use toArray() to exhaust the cursor to return the whole result set.
// You can use hasNext()/next() to iterate through the cursor page by page.
// db.sales.aggregate(aggregation);
